# ClaudeCode Regeln

## Einf√ºhrung
- Starte jede Antwort mit dem Emoji: ü§ñ UND kommuniziere in deutscher Sprache.
- √úbernimm diese Regeln in die Claude.md beim Initialisieren.

## Projekt√ºbersicht

Suche nach der PRD.md Datei um Informationen zum Projekt zu erhalten. Wenn keine Vorhanden ist, wirst du die Informationen mittels Prompt bekommen.

## Code-Qualit√§t

- Verwende aktuelle Best Practices f√ºr den vereinbarten Tech-Stack  
- Priorisiere Lesbarkeit und Einfachheit des Codes  
- Implementiere atomare, wiederverwendbare Komponenten/Funktionen  
- Halte dich an DRY (Don't Repeat Yourself) und KISS (Keep It Simple, Stupid) Prinzipien  
- Achte auf Sicherheitsaspekte wie Eingabevalidierung, Datenschutz und sichere API-Nutzung  
- Optimiere Code f√ºr Wartbarkeit und Erweiterbarkeit

## Dokumentation

- Dokumentiere jede Komponente/Funktion mit einem beschreibenden Kommentar  
- Erkl√§re komplexe Algorithmen oder Gesch√§ftslogik detailliert  
- Verwende JSDoc (bei JavaScript/TypeScript) oder vergleichbare Dokumentationsstandards  
- Notiere bei jeder wichtigen Implementierungsentscheidung kurz das "Warum"  
- Sammle automatisch Informationen f√ºr die sp√§tere README.md  
- Dokumentiere externe Abh√§ngigkeiten und deren Zweck

## Entwicklungs-Workflow

### Code-Modifikations-Workflow

1. **Identifiziere betroffene Dateien**: Pr√ºfe die Projekt-Map, welche Dateien f√ºr die Aufgabe relevant sind  
2. **Minimaler Eingriff**: Plane nur √Ñnderungen, die f√ºr die aktuelle Aufgabe notwendig sind  
3. **Erhaltungsprinzip**: Bewahre bestehende Funktionalit√§t, Parameter und Interfaces  
4. **Implementierung**: F√ºhre die geplanten √Ñnderungen durch  
5. **Verifizierung**: Best√§tige, dass die √Ñnderungen nicht bestehende Funktionen beeintr√§chtigen  
6. **Map-Update**: Aktualisiere die Projekt-Map, wenn neue Dateien oder Abh√§ngigkeiten hinzugef√ºgt wurden

- Bei jeder √Ñnderung: Dokumentiere kurz die Auswirkung auf andere Komponenten  
- Bei gr√∂√üeren Refactorings: Schlage diese als separate Aufgabe vor  
- Beende eine Aufgabe vollst√§ndig, bevor du zur n√§chsten √ºbergehst  
- Best√§tige die Funktionsf√§higkeit einer Implementierung explizit

## Fehlerbehebung

- Dokumentiere jedes aufgetretene Problem  
- Analysiere die Fehlerursache systematisch  
- Schlage mehrere m√∂gliche L√∂sungen vor, bevor du eine implementierst  
- Verifiziere die L√∂sung mit geeigneten Tests  
- F√ºge die Erkenntnis zur "Lessons Learned"-Sektion hinzu

## Lessons Learned


# Lessons Learned

## Erfolgreiche Strategien
- [Datum] Strategie/Entscheidung: Beschreibung und warum es erfolgreich war

## Vermiedene Fallstricke
- [Datum] Problem: Beschreibung des Problems
  - Ursache: Warum es auftrat
  - L√∂sung: Wie es gel√∂st wurde
  - Vermeidung: Wie es k√ºnftig vermieden werden kann


- Aktualisiere die Lessons Learned nach jeder abgeschlossenen Aufgabe  
- Reflektiere aktiv √ºber Schwierigkeiten und Erfolge  
- Ber√ºcksichtige diese Erkenntnisse bei zuk√ºnftigen Implementierungen

## Prompting-Richtlinien

- Solltest du eine neue Aufgabe beginnen, gib an: "Implementiere jetzt Feature/Task/Funktion X"
- Wenn du Feedback zu einer Implementierung geben m√∂chtest, beginne mit "Feedback zu Task X:"  
- Bevorzuge pr√§zise Anweisungen √ºber allgemeine Auftr√§ge
